# Production Environment Configuration - Web Service Only
# Copy this file to `.env` and fill in real values. Do NOT commit your real `.env`.
#
# This setup assumes you have:
# - PostgreSQL running on host (or accessible via network)
# - Redis running on host (or accessible via network) 
# - Nginx running on host (will serve static/media from ./static and ./media folders)
#
# The web container will:
# - Expose port 8000 (configurable via WEB_PORT)
# - Mount ./static, ./media, ./logs to host for nginx access
# - Connect to your external DB/Redis via DATABASE_URL/REDIS_URL

# =============================================================================
# DJANGO CORE SETTINGS
# =============================================================================

# Generate with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=your-super-secret-key-here-change-this

# ALWAYS False in production
DEBUG=False

# Your domain(s) - comma separated, no spaces
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com

# =============================================================================
# DATABASE CONFIGURATION (External)
# =============================================================================

# Connect to your existing PostgreSQL
# Examples:
# - Host PostgreSQL: postgres://user:password@localhost:5432/dbname
# - Network PostgreSQL: postgres://user:password@192.168.1.100:5432/dbname
DATABASE_URL=postgres://postgres:your-secure-password@localhost:5432/core_backend

# =============================================================================
# REDIS CONFIGURATION (External)
# =============================================================================

# Connect to your existing Redis
# Examples:  
# - Host Redis: redis://localhost:6379/0
# - Network Redis: redis://192.168.1.100:6379/0
# - Redis with auth: redis://:password@localhost:6379/0
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# WEB SERVICE CONFIGURATION
# =============================================================================

# Port to expose the web container (your nginx will proxy to this)
WEB_PORT=8000

# Gunicorn workers (adjust based on CPU cores: 2 * cores + 1)
GUNICORN_WORKERS=3
GUNICORN_TIMEOUT=120

# Container user settings
APP_UID=1000
APP_GID=1000

# =============================================================================
# SECURITY & PERFORMANCE
# =============================================================================

# CORS settings for frontend domains
CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# Email backend (for production notifications)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# Logging level
LOG_LEVEL=INFO

# File upload limits
FILE_UPLOAD_MAX_MEMORY_SIZE=5242880
DATA_UPLOAD_MAX_MEMORY_SIZE=5242880

# SSL/HTTPS (if using nginx with SSL termination)
SECURE_SSL_REDIRECT=True
SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https

# =============================================================================
# DEPLOYMENT COMMANDS
# =============================================================================
# 
# Run migrations (production):
# docker compose -f docker-compose.manage.yml run --rm manage migrate
#
# Create superuser:
# docker compose -f docker-compose.manage.yml run --rm manage createsuperuser
#
# Collect static files:
# docker compose -f docker-compose.manage.yml run --rm manage collectstatic --noinput
#
# Start web service:
# docker compose -f docker-compose.prod.web.yml up -d --build
#
# =============================================================================
# NGINX CONFIGURATION NOTES
# =============================================================================
# Your nginx should:
# 1. Proxy requests to http://localhost:8000 (or WEB_PORT)
# 2. Serve static files from ./static/ directory
# 3. Serve media files from ./media/ directory  
# 4. Set proper headers: X-Forwarded-Proto, X-Real-IP, etc.
#
# Example nginx location blocks:
# location / { proxy_pass http://localhost:8000; }
# location /static/ { alias /path/to/your/project/static/; }
# location /media/ { alias /path/to/your/project/media/; }
# Copy this file to `.env` and fill in values before running `docker compose -f docker-compose.prod.yml up -d`.
# Keep secrets out of version control.

SECRET_KEY=replace-with-secret-key
DEBUG=False

# Database
POSTGRES_DB=core_backend
POSTGRES_USER=postgres
POSTGRES_PASSWORD=strong-db-password
DATABASE_URL=postgres://postgres:strong-db-password@db:5432/core_backend

# Redis
REDIS_URL=redis://redis:6379/0

# Optional
ALLOWED_HOSTS=example.com
# Django Settings
DEBUG=True
SECRET_KEY=your-very-secret-key-change-in-production-minimum-50-characters
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Database Configuration
# For development with SQLite (default)
DATABASE_URL=sqlite:///db.sqlite3

# For production with PostgreSQL
# DATABASE_URL=postgres://user:password@localhost:5432/database_name

# Redis Configuration
REDIS_URL=redis://localhost:6379/0

# Email Configuration (optional)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EMAIL_HOST=
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

# AWS S3 Configuration (optional for media files)
USE_S3=False
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_STORAGE_BUCKET_NAME=
AWS_S3_REGION_NAME=us-east-1

# Additional Security Settings
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
